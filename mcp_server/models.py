# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:04:20+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class BackupId(RootModel[constr(pattern=r'backup-[2-7a-zA-Z]{11,16}')]):
    root: constr(pattern=r'backup-[2-7a-zA-Z]{11,16}')


class BackupPolicy(Enum):
    DEFAULT = 'DEFAULT'


class BackupRetentionType(Enum):
    DAYS = 'DAYS'


class BackupRetentionValue(
    RootModel[constr(pattern=r'[0-9]+', min_length=1, max_length=3)]
):
    root: constr(pattern=r'[0-9]+', min_length=1, max_length=3)


class BackupState(Enum):
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    READY = 'READY'
    DELETED = 'DELETED'
    PENDING_DELETION = 'PENDING_DELETION'


class BackupsMaxSize(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class Boolean(RootModel[bool]):
    root: bool


class Cert(RootModel[constr(pattern=r'[a-zA-Z0-9+-/=\s]*', max_length=5000)]):
    root: constr(pattern=r'[a-zA-Z0-9+-/=\s]*', max_length=5000)


class Certificates(BaseModel):
    AwsHardwareCertificate: Optional[Cert] = None
    ClusterCertificate: Optional[Cert] = None
    ClusterCsr: Optional[Cert] = None
    HsmCertificate: Optional[Cert] = None
    ManufacturerHardwareCertificate: Optional[Cert] = None


class CloudHsmAccessDeniedException(RootModel[Any]):
    root: Any


class CloudHsmInternalFailureException(RootModel[Any]):
    root: Any


class CloudHsmInvalidRequestException(RootModel[Any]):
    root: Any


class CloudHsmResourceNotFoundException(RootModel[Any]):
    root: Any


class CloudHsmServiceException(RootModel[Any]):
    root: Any


class CloudHsmTagException(RootModel[Any]):
    root: Any


class ClusterId(RootModel[constr(pattern=r'cluster-[2-7a-zA-Z]{11,16}')]):
    root: constr(pattern=r'cluster-[2-7a-zA-Z]{11,16}')


class ClusterState(Enum):
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    UNINITIALIZED = 'UNINITIALIZED'
    INITIALIZE_IN_PROGRESS = 'INITIALIZE_IN_PROGRESS'
    INITIALIZED = 'INITIALIZED'
    ACTIVE = 'ACTIVE'
    UPDATE_IN_PROGRESS = 'UPDATE_IN_PROGRESS'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    DELETED = 'DELETED'
    DEGRADED = 'DEGRADED'


class ClustersMaxSize(RootModel[conint(ge=1, le=25)]):
    root: conint(ge=1, le=25)


class DeleteBackupRequest(BaseModel):
    BackupId_1: BackupId = Field(..., alias='BackupId')


class DeleteClusterRequest(BaseModel):
    ClusterId_1: ClusterId = Field(..., alias='ClusterId')


class EniId(RootModel[constr(pattern=r'eni-[0-9a-fA-F]{8,17}')]):
    root: constr(pattern=r'eni-[0-9a-fA-F]{8,17}')


class ExternalAz(
    RootModel[
        constr(
            pattern=r'[a-z]{2}(-(gov))?-(east|west|north|south|central){1,2}-\d[a-z]'
        )
    ]
):
    root: constr(
        pattern=r'[a-z]{2}(-(gov))?-(east|west|north|south|central){1,2}-\d[a-z]'
    )


class FieldModel(RootModel[constr(pattern=r'[a-zA-Z0-9_-]+')]):
    root: constr(pattern=r'[a-zA-Z0-9_-]+')


class HsmId(RootModel[constr(pattern=r'hsm-[2-7a-zA-Z]{11,16}')]):
    root: constr(pattern=r'hsm-[2-7a-zA-Z]{11,16}')


class HsmState(Enum):
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    ACTIVE = 'ACTIVE'
    DEGRADED = 'DEGRADED'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    DELETED = 'DELETED'


class HsmType(RootModel[constr(pattern=r'(hsm1\.medium)')]):
    root: constr(pattern=r'(hsm1\.medium)')


class InitializeClusterRequest(BaseModel):
    ClusterId_1: ClusterId = Field(..., alias='ClusterId')
    SignedCert: Cert
    TrustAnchor: Cert


class IpAddress(RootModel[constr(pattern=r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}')]):
    root: constr(pattern=r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}')


class MaxSize(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class ModifyBackupAttributesRequest(BaseModel):
    BackupId_1: BackupId = Field(..., alias='BackupId')
    NeverExpires: Boolean


class NextToken(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class PreCoPassword(RootModel[constr(min_length=7, max_length=32)]):
    root: constr(min_length=7, max_length=32)


class Region(
    RootModel[
        constr(pattern=r'[a-z]{2}(-(gov))?-(east|west|north|south|central){1,2}-\d')
    ]
):
    root: constr(pattern=r'[a-z]{2}(-(gov))?-(east|west|north|south|central){1,2}-\d')


class ResourceId(RootModel[constr(pattern=r'(?:cluster|backup)-[2-7a-zA-Z]{11,16}')]):
    root: constr(pattern=r'(?:cluster|backup)-[2-7a-zA-Z]{11,16}')


class RestoreBackupRequest(BaseModel):
    BackupId_1: BackupId = Field(..., alias='BackupId')


class SecurityGroup(RootModel[constr(pattern=r'sg-[0-9a-fA-F]{8,17}')]):
    root: constr(pattern=r'sg-[0-9a-fA-F]{8,17}')


class StateMessage(RootModel[constr(pattern=r'.*', max_length=300)]):
    root: constr(pattern=r'.*', max_length=300)


class String(RootModel[str]):
    root: str


class Strings(RootModel[List[String]]):
    root: List[String]


class SubnetId(RootModel[constr(pattern=r'subnet-[0-9a-fA-F]{8,17}')]):
    root: constr(pattern=r'subnet-[0-9a-fA-F]{8,17}')


class SubnetIds(RootModel[List[SubnetId]]):
    root: List[SubnetId] = Field(..., max_length=10, min_length=1)


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class TagResourceResponse(BaseModel):
    pass


class TagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256
    )


class Timestamp(RootModel[datetime]):
    root: datetime


class UntagResourceRequest(BaseModel):
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')
    TagKeyList_1: TagKeyList = Field(..., alias='TagKeyList')


class UntagResourceResponse(BaseModel):
    pass


class VpcId(RootModel[constr(pattern=r'vpc-[0-9a-fA-F]')]):
    root: constr(pattern=r'vpc-[0-9a-fA-F]')


class XAmzTarget(Enum):
    BaldrApiService_CopyBackupToRegion = 'BaldrApiService.CopyBackupToRegion'


class XAmzTarget1(Enum):
    BaldrApiService_CreateCluster = 'BaldrApiService.CreateCluster'


class XAmzTarget2(Enum):
    BaldrApiService_CreateHsm = 'BaldrApiService.CreateHsm'


class XAmzTarget3(Enum):
    BaldrApiService_DeleteBackup = 'BaldrApiService.DeleteBackup'


class XAmzTarget4(Enum):
    BaldrApiService_DeleteCluster = 'BaldrApiService.DeleteCluster'


class XAmzTarget5(Enum):
    BaldrApiService_DeleteHsm = 'BaldrApiService.DeleteHsm'


class XAmzTarget6(Enum):
    BaldrApiService_DescribeBackups = 'BaldrApiService.DescribeBackups'


class XAmzTarget7(Enum):
    BaldrApiService_DescribeClusters = 'BaldrApiService.DescribeClusters'


class XAmzTarget8(Enum):
    BaldrApiService_InitializeCluster = 'BaldrApiService.InitializeCluster'


class XAmzTarget9(Enum):
    BaldrApiService_ListTags = 'BaldrApiService.ListTags'


class XAmzTarget10(Enum):
    BaldrApiService_ModifyBackupAttributes = 'BaldrApiService.ModifyBackupAttributes'


class XAmzTarget11(Enum):
    BaldrApiService_ModifyCluster = 'BaldrApiService.ModifyCluster'


class XAmzTarget12(Enum):
    BaldrApiService_RestoreBackup = 'BaldrApiService.RestoreBackup'


class XAmzTarget13(Enum):
    BaldrApiService_TagResource = 'BaldrApiService.TagResource'


class XAmzTarget14(Enum):
    BaldrApiService_UntagResource = 'BaldrApiService.UntagResource'


class BackupRetentionPolicy(BaseModel):
    Type: Optional[BackupRetentionType] = None
    Value: Optional[BackupRetentionValue] = None


class CreateHsmRequest(BaseModel):
    AvailabilityZone: ExternalAz
    ClusterId_1: ClusterId = Field(..., alias='ClusterId')
    IpAddress_1: Optional[IpAddress] = Field(None, alias='IpAddress')


class DeleteHsmRequest(BaseModel):
    ClusterId_1: ClusterId = Field(..., alias='ClusterId')
    EniId_1: Optional[EniId] = Field(None, alias='EniId')
    EniIp: Optional[IpAddress] = None
    HsmId_1: Optional[HsmId] = Field(None, alias='HsmId')


class DeleteHsmResponse(BaseModel):
    HsmId_1: Optional[HsmId] = Field(None, alias='HsmId')


class DestinationBackup(BaseModel):
    CreateTimestamp: Optional[Timestamp] = None
    SourceBackup: Optional[BackupId] = None
    SourceCluster: Optional[ClusterId] = None
    SourceRegion: Optional[Region] = None


class ExternalSubnetMapping(RootModel[Optional[Dict[str, SubnetId]]]):
    root: Optional[Dict[str, SubnetId]] = None


class Filters(RootModel[Optional[Dict[str, Strings]]]):
    root: Optional[Dict[str, Strings]] = None


class Hsm(BaseModel):
    AvailabilityZone: Optional[ExternalAz] = None
    ClusterId_1: Optional[ClusterId] = Field(None, alias='ClusterId')
    EniId_1: Optional[EniId] = Field(None, alias='EniId')
    EniIp: Optional[IpAddress] = None
    HsmId_1: HsmId = Field(..., alias='HsmId')
    State: Optional[HsmState] = None
    StateMessage: Optional[String] = None
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')


class Hsms(RootModel[List[Hsm]]):
    root: List[Hsm]


class InitializeClusterResponse(BaseModel):
    State: Optional[ClusterState] = None
    StateMessage_1: Optional[StateMessage] = Field(None, alias='StateMessage')


class ListTagsRequest(BaseModel):
    MaxResults: Optional[MaxSize] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')


class ModifyClusterRequest(BaseModel):
    BackupRetentionPolicy_1: BackupRetentionPolicy = Field(
        ..., alias='BackupRetentionPolicy'
    )
    ClusterId_1: ClusterId = Field(..., alias='ClusterId')


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=50, min_length=1)


class TagResourceRequest(BaseModel):
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')
    TagList_1: TagList = Field(..., alias='TagList')


class Backup(BaseModel):
    BackupId_1: BackupId = Field(..., alias='BackupId')
    BackupState_1: Optional[BackupState] = Field(None, alias='BackupState')
    ClusterId_1: Optional[ClusterId] = Field(None, alias='ClusterId')
    CopyTimestamp: Optional[Timestamp] = None
    CreateTimestamp: Optional[Timestamp] = None
    DeleteTimestamp: Optional[Timestamp] = None
    NeverExpires: Optional[Boolean] = None
    SourceBackup: Optional[BackupId] = None
    SourceCluster: Optional[ClusterId] = None
    SourceRegion: Optional[Region] = None
    TagList_1: Optional[TagList] = Field(None, alias='TagList')


class Backups(RootModel[List[Backup]]):
    root: List[Backup]


class Cluster(BaseModel):
    BackupPolicy_1: Optional[BackupPolicy] = Field(None, alias='BackupPolicy')
    BackupRetentionPolicy_1: Optional[BackupRetentionPolicy] = Field(
        None, alias='BackupRetentionPolicy'
    )
    Certificates_1: Optional[Certificates] = Field(None, alias='Certificates')
    ClusterId_1: Optional[ClusterId] = Field(None, alias='ClusterId')
    CreateTimestamp: Optional[Timestamp] = None
    HsmType_1: Optional[HsmType] = Field(None, alias='HsmType')
    Hsms_1: Optional[Hsms] = Field(None, alias='Hsms')
    PreCoPassword_1: Optional[PreCoPassword] = Field(None, alias='PreCoPassword')
    SecurityGroup_1: Optional[SecurityGroup] = Field(None, alias='SecurityGroup')
    SourceBackupId: Optional[BackupId] = None
    State: Optional[ClusterState] = None
    StateMessage_1: Optional[StateMessage] = Field(None, alias='StateMessage')
    SubnetMapping: Optional[ExternalSubnetMapping] = None
    TagList_1: Optional[TagList] = Field(None, alias='TagList')
    VpcId_1: Optional[VpcId] = Field(None, alias='VpcId')


class Clusters(RootModel[List[Cluster]]):
    root: List[Cluster]


class CopyBackupToRegionRequest(BaseModel):
    BackupId_1: BackupId = Field(..., alias='BackupId')
    DestinationRegion: Region
    TagList_1: Optional[TagList] = Field(None, alias='TagList')


class CopyBackupToRegionResponse(BaseModel):
    DestinationBackup_1: Optional[DestinationBackup] = Field(
        None, alias='DestinationBackup'
    )


class CreateClusterRequest(BaseModel):
    BackupRetentionPolicy_1: Optional[BackupRetentionPolicy] = Field(
        None, alias='BackupRetentionPolicy'
    )
    HsmType_1: HsmType = Field(..., alias='HsmType')
    SourceBackupId: Optional[BackupId] = None
    SubnetIds_1: SubnetIds = Field(..., alias='SubnetIds')
    TagList_1: Optional[TagList] = Field(None, alias='TagList')


class CreateClusterResponse(BaseModel):
    Cluster_1: Optional[Cluster] = Field(None, alias='Cluster')


class CreateHsmResponse(BaseModel):
    Hsm_1: Optional[Hsm] = Field(None, alias='Hsm')


class DeleteBackupResponse(BaseModel):
    Backup_1: Optional[Backup] = Field(None, alias='Backup')


class DeleteClusterResponse(BaseModel):
    Cluster_1: Optional[Cluster] = Field(None, alias='Cluster')


class DescribeBackupsRequest(BaseModel):
    Filters_1: Optional[Filters] = Field(None, alias='Filters')
    MaxResults: Optional[BackupsMaxSize] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortAscending: Optional[Boolean] = None


class DescribeBackupsResponse(BaseModel):
    Backups_1: Optional[Backups] = Field(None, alias='Backups')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeClustersRequest(BaseModel):
    Filters_1: Optional[Filters] = Field(None, alias='Filters')
    MaxResults: Optional[ClustersMaxSize] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeClustersResponse(BaseModel):
    Clusters_1: Optional[Clusters] = Field(None, alias='Clusters')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTagsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TagList_1: TagList = Field(..., alias='TagList')


class ModifyBackupAttributesResponse(BaseModel):
    Backup_1: Optional[Backup] = Field(None, alias='Backup')


class ModifyClusterResponse(BaseModel):
    Cluster_1: Optional[Cluster] = Field(None, alias='Cluster')


class RestoreBackupResponse(BaseModel):
    Backup_1: Optional[Backup] = Field(None, alias='Backup')
